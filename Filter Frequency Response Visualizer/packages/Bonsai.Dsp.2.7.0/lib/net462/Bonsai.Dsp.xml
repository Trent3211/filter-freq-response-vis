<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.Dsp</name>
    </assembly>
    <members>
        <member name="T:Bonsai.Dsp.Abs">
            <summary>
            Represents an operator that calculates the absolute value of each element in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.SByte})">
            <summary>
            Calculates the absolute value of each 8-bit signed integer in the sequence.
            </summary>
            <param name="source">
            A sequence of 8-bit signed integer values.
            </param>
            <returns>
            A sequence of 8-bit signed integer values, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Int16})">
            <summary>
            Calculates the absolute value of each 16-bit signed integer in the sequence.
            </summary>
            <param name="source">
            A sequence of 16-bit signed integer values.
            </param>
            <returns>
            A sequence of 16-bit signed integer values, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Int32})">
            <summary>
            Calculates the absolute value of each 32-bit signed integer in the sequence.
            </summary>
            <param name="source">
            A sequence of 32-bit signed integer values.
            </param>
            <returns>
            A sequence of 32-bit signed integer values, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Int64})">
            <summary>
            Calculates the absolute value of each 64-bit signed integer in the sequence.
            </summary>
            <param name="source">
            A sequence of 64-bit signed integer values.
            </param>
            <returns>
            A sequence of 64-bit signed integer values, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Single})">
            <summary>
            Calculates the absolute value of each 32-bit floating-point number in the sequence.
            </summary>
            <param name="source">
            A sequence of 32-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 32-bit floating-point numbers, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Double})">
            <summary>
            Calculates the absolute value of each 64-bit floating-point number in the sequence.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 64-bit floating-point numbers, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process(System.IObservable{System.Decimal})">
            <summary>
            Calculates the absolute value of each <see cref="T:System.Decimal"/> number in the sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> numbers.
            </param>
            <returns>
            A sequence of <see cref="T:System.Decimal"/> numbers, where each value
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Abs.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the absolute value of individual elements for all arrays in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each element of the array
            is greater than or equal to zero.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.AbsoluteDifference">
            <summary>
            Represents an operator that calculates the absolute difference between all pairs of arrays in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.AbsoluteDifference.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Calculates the absolute difference between all pairs of arrays in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each array stores the absolute
            difference between each pair in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Accumulate">
            <summary>
            Represents an operator that calculates the cumulative sum of the arrays in a sequence
            and returns each intermediate result.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Accumulate.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the cumulative sum of the arrays in an observable sequence and returns
            each intermediate result.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each array stores the
            cumulative sum of all previous array values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ArrayExtrema">
            <summary>
            Represents the minimum and maximum values of a 2D array, and their corresponding locations.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.ArrayExtrema.MinValue">
            <summary>
            The minimum value of the 2D array.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.ArrayExtrema.MaxValue">
            <summary>
            The maximum value of the 2D array.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.ArrayExtrema.MinLocation">
            <summary>
            The zero-based index of the minimum value in the 2D array.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.ArrayExtrema.MaxLocation">
            <summary>
            The zero-based index of the maximum value in the 2D array.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ArrayExtrema.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Dsp.ArrayTransform">
            <summary>
            Provides an abstract base class for operators that transform sequences
            of array-like objects.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ArrayTransform.Process``1(System.IObservable{``0})">
            <summary>
            When overridden in a derived class, returns a sequence of array-like
            objects where each element is a transformation of the corresponding
            array in the original sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects to be transformed.
            </param>
            <returns>
            A sequence of the transformed array-like objects.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Average">
            <summary>
            Represents an operator that calculates the average, or arithmetic mean, of each channel for
            all the arrays in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Average.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the average, or arithmetic mean, of each channel for all the arrays
            in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of array values for which to calculate the per-channel average.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Scalar"/> tuple containing the average of each channel for all
            the arrays in the <paramref name="source"/> sequence.
            </returns>
            <remarks>
            For multi-channel images using BGR, RGB, or other color formats, the order of
            values in the <see cref="T:OpenCV.Net.Scalar"/> tuple follows the order of channels in the
            color format, e.g. for a BGR image, the average for the blue-channel will be
            stored in <see cref="F:OpenCV.Net.Scalar.Val0"/>, the average for the green-channel in
            <see cref="F:OpenCV.Net.Scalar.Val1"/>, etc.
            
            For single-channel arrays such as a grayscale image or a 2D floating point
            array with signal processing data, the average will be stored in the first
            value of the tuple, <see cref="F:OpenCV.Net.Scalar.Val0"/>.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.Average.Process``2(System.IObservable{System.Tuple{``0,``1}})">
            <summary>
            Calculates the average, or arithmetic mean, of each channel for all the arrays
            in an observable sequence, where each array is paired with a mask where non-zero
            values indicate which elements in the array should be averaged.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects to average.
            </typeparam>
            <typeparam name="TMask">
            The type of the array-like objects used as an operation mask.
            </typeparam>
            <param name="source">
            A sequence of array pairs, where the first array contains the elements used
            to compute the average, and the second array contains the operation mask,
            where non-zero values indicate which elements in the first array should be averaged.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Scalar"/> tuple containing the average of each channel for all
            the arrays in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.BinaryArrayTransform">
            <summary>
            Provides an abstract base class for operators that perform a binary transformation
            on pairs of array-like objects in an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.BinaryArrayTransform.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            When overridden in a derived class, applies a binary transformation to all
            pairs of array-like objects in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence containing the pairs of array-like objects for which to apply
            the binary transformation.
            </param>
            <returns>
            A sequence containing the results of the binary transformation.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.BitBuffer">
            <summary>
            Represents an operator that demultiplexes individual bits of all the elements in a sequence
            into separate rows of a 2D array.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.Byte})">
            <summary>
            Demultiplexes individual bits of all the 8-bit unsigned integers in a sequence
            into eight separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 8-bit unsigned integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 8-bit unsigned integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.SByte})">
            <summary>
            Demultiplexes individual bits of all the 8-bit signed integers in a sequence
            into eight separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 8-bit signed integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 8-bit signed integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.Int16})">
            <summary>
            Demultiplexes individual bits of all the 16-bit signed integers in a sequence
            into sixteen separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 16-bit signed integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 16-bit signed integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.UInt16})">
            <summary>
            Demultiplexes individual bits of all the 16-bit unsigned integers in a sequence
            into sixteen separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 16-bit unsigned integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 16-bit unsigned integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.Int32})">
            <summary>
            Demultiplexes individual bits of all the 32-bit signed integers in a sequence
            into thirty-two separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 32-bit signed integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 32-bit signed integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.UInt32})">
            <summary>
            Demultiplexes individual bits of all the 32-bit unsigned integers in a sequence
            into thirty-two separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 32-bit unsigned integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 32-bit unsigned integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.Int64})">
            <summary>
            Demultiplexes individual bits of all the 64-bit signed integers in a sequence
            into sixty-four separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 64-bit signed integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 64-bit signed integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{System.UInt64})">
            <summary>
            Demultiplexes individual bits of all the 64-bit unsigned integers in a sequence
            into sixty-four separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 64-bit unsigned integer values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the 64-bit unsigned integer value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.BitBuffer.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Demultiplexes individual bits of all the 2D array values in a sequence
            into multiple separate rows of a 2D array.
            </summary>
            <param name="source">
            A sequence of 2D array values.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects, where each array contains one row
            for each bit in the original 2D array value.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Buffer">
            <summary>
            Represents an operator that collects each element of the sequence into zero or more
            array buffers based on element count information.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Buffer.Count">
            <summary>
            Gets or sets the number of elements in each array buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Buffer.Skip">
            <summary>
            Gets or sets the optional number of elements to skip between the creation of consecutive buffers.
            </summary>
            <remarks>
            If no value is specified, it is considered to be be equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/> in order
            to generate consecutive non-overlapping buffers. If the value is less than <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            this operator will generate overlapping sliding windows.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Byte})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Int16})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.UInt16})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Int32})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Single})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Double})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> vectors of length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>
            containing the buffered data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of pairs of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            two rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of triples of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            three rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte,System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16,System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16,System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quadruples of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            four rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte,System.Byte,System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16,System.Int16,System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single,System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of quintuples of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            five rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single,System.Single,System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of sextuples of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            six rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Tuple{System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of septuples of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            seven rows and column length equal to <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.Byte}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 8-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.Int16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 16-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.UInt16}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 16-bit unsigned integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.Int32}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 32-bit signed integer values to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.Single}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 32-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{System.Collections.Generic.IList{System.Double}})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of lists of 64-bit floating-point numbers to buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            as many rows as there are elements in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Buffer.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Collects each element of the sequence into zero or more array buffers based on
            element count information.
            </summary>
            <param name="source">
            A sequence of array buffers containing the samples to buffer
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing the buffered data, with
            the same number of rows as each element in each list, and column length equal to
            <see cref="P:Bonsai.Dsp.Buffer.Count"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Butterworth">
            <summary>
            Represents an operator that filters frequencies in the input signal using a Butterworth
            infinite-impulse response filter with the specified design parameters.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.SampleRate">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.SamplingFrequency">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.SamplingFrequencySpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.Butterworth.SamplingFrequency"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.Cutoff1">
            <summary>
            Gets or sets the first cutoff frequency, in Hz, applied to the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.Cutoff2">
            <summary>
            Gets or sets the second cutoff frequency, in Hz, applied to the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.FilterOrder">
            <summary>
            Gets or sets the order of the IIR filter.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Butterworth.FilterType">
            <summary>
            Gets or sets the type of filter to apply on the signal.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Butterworth.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Filters frequencies in the input signal using a Butterworth infinite-impulse
            response filter with the specified design parameters.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Butterworth.Process(System.IObservable{System.Double})">
            <summary>
            Filters frequencies in the input signal using a Butterworth infinite-impulse
            response filter with the specified design parameters.
            </summary>
            <param name="source">
            A sequence of floating-point numbers representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of floating-point numbers representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.CartToPolar">
            <summary>
            Represents an operator that computes the magnitude and angle of each array
            of 2D vectors in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.CartToPolar.AngleInDegrees">
            <summary>
            Gets or sets a value specifying whether vector angle values are measured in degrees.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process``1(System.IObservable{``0})">
            <summary>
            Computes the magnitude and angle of each array of 2D vectors in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of 2D vector fields represented by a 2-channel array or image,
            for which to compute the magnitude and angle.
            </param>
            <returns>
            A sequence of 2-channel arrays or images, where the first channel of each
            element stores the magnitude and the second channel the angle of a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Computes the magnitude and angle for each pair of cartesian coordinates in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of arrays, where the first array stores the x-coordinates, and the
            second array the y-coordinates of a 2D vector field for which to compute the magnitude
            and angle.
            </param>
            <returns>
            A sequence of pairs of arrays, where the first array stores the magnitude, and the second
            array stores the angle of a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process(System.IObservable{OpenCV.Net.Point2d})">
            <summary>
            Computes the magnitude and angle for each pair of 2D points in the sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with double-precision cartesian coordinates, for
            which to compute the corresponding polar coordinates.
            </param>
            <returns>
            A sequence of points specifying the corresponding double-precision polar
            coordinates for each 2D vector in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Computes the magnitude and angle for each pair of 2D points in the sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with single-precision cartesian coordinates, for
            which to compute the corresponding polar coordinates.
            </param>
            <returns>
            A sequence of points specifying the corresponding single-precision polar
            coordinates for each 2D vector in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process(System.IObservable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Computes the polar coordinates for each pair of cartesian coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of pairs specifying double-precision cartesian coordinates, where
            the first item stores the x-coordinate, and the second item the y-coordinate
            of a 2D vector for which to compute the polar coordinates.
            </param>
            <returns>
            A sequence of pairs specifying double-precision polar coordinates, where the
            first item stores the magnitude, and the second item the angle of a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.CartToPolar.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Computes the polar coordinates for each pair of cartesian coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of pairs specifying single-precision cartesian coordinates, where
            the first item stores the x-coordinate, and the second item the y-coordinate
            of a 2D vector for which to compute the polar coordinates.
            </param>
            <returns>
            A sequence of pairs specifying single-precision polar coordinates, where the
            first item stores the magnitude, and the second item the angle of a 2D vector.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Concat">
            <summary>
            Represents an operator that concatenates each set of arrays in the sequence
            into a single buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Concat.Axis">
            <summary>
            Gets or sets the dimension along which to merge the arrays.
            </summary>
            <remarks>
            A value of zero specifies concatenating rows, and a value of one specifies
            concatenating columns. In the case of concatenating single-dimension arrays,
            the <see cref="P:Bonsai.Dsp.Concat.Axis"/> property is ignored.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Concatenates each pair of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0,``0}})">
            <summary>
            Concatenates each triple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of triples of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0,``0,``0}})">
            <summary>
            Concatenates each quadruple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of quadruples of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0,``0,``0,``0}})">
            <summary>
            Concatenates each quintuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of quintuples of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0,``0,``0,``0,``0}})">
            <summary>
            Concatenates each sextuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of sextuples of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
            Concatenates each septuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of septuples of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Collections.Generic.IList{``0}})">
            <summary>
            Concatenates each list of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of lists of arrays to concatenate into a single buffer.
            </param>
            <returns>
            The sequence of concatenated buffers.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[]}})">
            <summary>
            Concatenates each pair of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[],``0[]}})">
            <summary>
            Concatenates each triple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of triples of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[],``0[],``0[]}})">
            <summary>
            Concatenates each quadruple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of quadruples of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[],``0[],``0[],``0[]}})">
            <summary>
            Concatenates each quintuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of quintuples of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[],``0[],``0[],``0[],``0[]}})">
            <summary>
            Concatenates each sextuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of sextuples of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Tuple{``0[],``0[],``0[],``0[],``0[],``0[],``0[]}})">
            <summary>
            Concatenates each septuple of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of septuples of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Concat.Process``1(System.IObservable{System.Collections.Generic.IList{``0[]}})">
            <summary>
            Concatenates each list of arrays in the sequence into a single buffer.
            </summary>
            <typeparam name="TElement">
            The type of the elements stored in the array sequence.
            </typeparam>
            <param name="source">
            A sequence of lists of arrays to concatenate into a single array.
            </param>
            <returns>
            The sequence of concatenated arrays.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ConvertFromArray">
            <summary>
            Represents an operator that converts each managed array in the sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ConvertFromArray.Size">
            <summary>
            Gets or sets the size of the output array buffer.
            </summary>
            <remarks>
            If one dimension is zero, the output will be either a row or column vector
            along the non-zero dimension. If both dimensions are zero, the output will
            be a row vector with the same number of elements as the length of each
            array in the sequence.
            </remarks>
        </member>
        <member name="P:Bonsai.Dsp.ConvertFromArray.Depth">
            <summary>
            Gets or sets the bit depth of each element in the output array buffer.
            </summary>
            <remarks>
            If this property is not specified, the default depth will be automatically
            selected based on the type of the input array elements.
            </remarks>
        </member>
        <member name="P:Bonsai.Dsp.ConvertFromArray.Channels">
            <summary>
            Gets or sets the number of channels in the output array buffer.
            </summary>
            <remarks>
            If this property is not specified, the default number of channels
            will be one.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.Byte[]})">
            <summary>
            Converts each <see cref="T:System.Byte"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 8-bit unsigned integer arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.Int16[]})">
            <summary>
            Converts each <see cref="T:System.Int16"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 16-bit signed integer arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.UInt16[]})">
            <summary>
            Converts each <see cref="T:System.UInt16"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 16-bit unsigned integer arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.Int32[]})">
            <summary>
            Converts each <see cref="T:System.Int32"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 32-bit signed integer arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.Single[]})">
            <summary>
            Converts each <see cref="T:System.Single"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 32-bit floating-point arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process(System.IObservable{System.Double[]})">
            <summary>
            Converts each <see cref="T:System.Double"/> array in an observable sequence into a
            2D array buffer with the specified size, depth and number of channels.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point arrays to convert into a sequence of
            sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertFromArray.Process``1(System.IObservable{``0[]})">
            <summary>
            Converts each array of type <typeparamref name="TData"/> in an observable
            sequence into a 2D array buffer with the specified size, depth and number
            of channels.
            </summary>
            <typeparam name="TData">The type of the values stored in each array.</typeparam>
            <param name="source">
            A sequence of arrays of type <typeparamref name="TData"/> to convert into a
            sequence of sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects containing a copy of the managed
            array data reinterpreted as a 2D array buffer with the specified size, depth
            and number of channels.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ConvertScale">
            <summary>
            Represents an operator that converts each array in the sequence to the specified
            bit depth, with optional linear transformation.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ConvertScale.Depth">
            <summary>
            Gets or sets the bit depth of each element in the output array.
            </summary>
            <remarks>
            If this property is not specified, the bit depth of the output array
            will be the same as the bit depth of the input array.
            </remarks>
        </member>
        <member name="P:Bonsai.Dsp.ConvertScale.Scale">
            <summary>
            Gets or sets the optional scale factor to apply to the array elements.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ConvertScale.Shift">
            <summary>
            Gets or sets the optional value to be added to the scaled array elements.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ConvertScale.Process``1(System.IObservable{``0})">
            <summary>
            Converts each array in the sequence to the specified bit depth, with
            optional linear transformation.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">The sequence of arrays to be converted.</param>
            <returns>
            A sequence containing the converted and scaled arrays.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ConvertToArray">
            <summary>
            Represents an operator that converts each array or collection in the sequence into
            a managed array.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ConvertToArray.Depth">
            <summary>
            Gets or sets the bit depth of each element in the input array.
            </summary>
            <remarks>
            If this property is not specified, the default depth will be automatically
            selected based on the type of the input array elements.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToArray.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that maps the array or collection into
            a managed array.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Dsp.ConvertToMat">
            <summary>
            Represents an operator that converts each array-like object in the sequence
            into a 2D matrix.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToMat.Process``1(System.IObservable{``0})">
            <summary>
            Converts each array-like object in an observable sequence into a 2D matrix.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects to be converted.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the
            matrix header for the arbitrary array.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ConvertToSeq">
            <summary>
            Represents an operator that converts a fixed size array type into a
            sequence of elements.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ConvertToSeq.Flags">
            <summary>
            Gets or sets the operation flags for the element sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.Byte[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 8-bit unsigned integer arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.Int16[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 16-bit signed integer arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.UInt16[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 16-bit unsigned integer arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.Int32[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 32-bit signed integer arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.Single[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 32-bit floating-point arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{System.Double[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of 64-bit floating-point arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{OpenCV.Net.Point[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of <see cref="T:OpenCV.Net.Point"/> arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{OpenCV.Net.Point2f[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of <see cref="T:OpenCV.Net.Point2f"/> arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{OpenCV.Net.Point2d[]})">
            <summary>
            Converts each fixed size array in an observable sequence into a
            growable sequence of elements.
            </summary>
            <param name="source">
            An observable sequence of <see cref="T:OpenCV.Net.Point2d"/> arrays to convert into
            a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the array data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Converts each 2D array in an observable sequence into a growable sequence
            of elements.
            </summary>
            <param name="source">
            An observable sequence of multi-channel matrices to convert into a
            growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the multi-channel matrix data.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ConvertToSeq.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Converts each image in an observable sequence into a growable sequence
            of elements.
            </summary>
            <param name="source">
            An observable sequence of images to convert into a growable sequence of elements.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the growable sequence
            header for the image data.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.CountNonZero">
            <summary>
            Represents an operator that counts all the non-zero elements for each array
            in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.CountNonZero.Process``1(System.IObservable{``0})">
            <summary>
            Counts all the non-zero elements for each array in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects for which to count non-zero elements.
            </param>
            <returns>
            A sequence of <see cref="T:System.Int32"/> values representing the number of
            non-zero elements in each array.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Decimate">
            <summary>
            Represents an operator that decreases the sampling rate of the input signal
            by the specified factor.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Decimate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dsp.Decimate"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.Downsampling">
            <summary>
            Gets or sets a value specifying the downsampling method used to decimate the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.BufferLength">
            <summary>
            Gets or sets the length of each output array. If set to zero, the length
            of each input buffer will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.Factor">
            <summary>
            Gets or sets the integral factor by which to divide the sampling rate of the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.SampleRate">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.SamplingFrequency">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.SamplingFrequencySpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.Decimate.SamplingFrequency"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Decimate.KernelLength">
            <summary>
            Gets or sets the size of the finite-impulse response kernel used to
            design the downsampling filter.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Decimate.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Decreases the sampling rate of the input signal by the specified factor.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to downsample.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            downsampled signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Delay">
            <summary>
            Represents an operator that delays the input signal by the specified number of samples.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Delay.Count">
            <summary>
            Gets or sets the number of samples by which to delay the input signal.
            </summary>
            <remarks>
            To avoid changing the number of buffers in the sequence, the beginning of the
            signal will be padded with zeros.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.Delay.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Delays the input signal by the specified number of samples.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to delay.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            delayed signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.DetectSpikes">
            <summary>
            Represents an operator that detects spike events in the input signal and
            extracts their waveforms.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.DetectSpikes.Delay">
            <summary>
            Gets or sets the delay of each spike waveform from its trigger, in samples.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.DetectSpikes.Length">
            <summary>
            Gets or sets the length of each spike waveform, in samples.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.DetectSpikes.Threshold">
            <summary>
            Gets or sets the per-channel threshold for detecting individual spikes.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.DetectSpikes.WaveformRefinement">
            <summary>
            Gets or sets a value specifying the waveform refinement method.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.DetectSpikes.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Detects spike events in the input signal and extracts their waveforms.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal from which to extract spike waveforms.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dsp.SpikeWaveformCollection"/> representing the spikes
            detected in each buffer of the signal waveform.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Difference">
            <summary>
            Represents an operator that calculates the Nth difference between adjacent
            samples in the input signal.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Difference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dsp.Difference"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Difference.Order">
            <summary>
            Gets or sets the number of times to apply the difference operator.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Difference.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Calculates the Nth difference between adjacent samples in the input signal.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal for which to compute the difference between adjacent samples.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the differences
            between adjacent samples in the input signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Difference.Process(System.IObservable{System.Double})">
            <summary>
            Calculates the Nth difference between adjacent values in an observable sequence.
            </summary>
            <param name="source">
            A sequence of floating-point numbers.
            </param>
            <returns>
            A sequence of floating-point numbers representing the differences
            between adjacent values in the original sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Difference.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Calculates the Nth difference between adjacent values in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with single-precision floating-point coordinates.
            </param>
            <returns>
            A sequence of 2D vectors representing the differences between adjacent
            points in the original sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.DiscreteFourierTransform">
            <summary>
            Represents an operator that performs a forward or inverse discrete Fourier transform
            on each 1D or 2D array in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.DiscreteFourierTransform.OperationFlags">
            <summary>
            Gets or sets a value specifying the operation of the discrete Fourier transform.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.DiscreteFourierTransform.Process``1(System.IObservable{``0})">
            <summary>
            Performs a forward or inverse discrete Fourier transform on each 1D or 2D array
            in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects for which to compute the discrete
            Fourier transform.
            </param>
            <returns>
            A sequence of two-channel array of complex numbers representing the discrete
            Fourier transform of each array in the input sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.DownsamplingMethod">
            <summary>
            Specifies the downsampling method used to decimate digital signals.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.None">
            <summary>
            No preprocessing will be used before decimating the signal. The
            downsampled signal will keep only every Mth sample, where M
            is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.LowPass">
            <summary>
            A low-pass filter will be applied to the signal before downsampling.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.Dithering">
            <summary>
            The downsampled signal will keep a random sample out of every
            M samples, where M is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.Sum">
            <summary>
            The downsampled signal will keep the sum of every M samples, where
            M is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.Avg">
            <summary>
            The downsampled signal will keep the average of every M samples, where
            M is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.Max">
            <summary>
            The downsampled signal will keep the largest of every M samples, where
            M is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.DownsamplingMethod.Min">
            <summary>
            The downsampled signal will keep the smallest of every M samples, where
            M is the integral factor in <see cref="P:Bonsai.Dsp.Decimate.Factor"/>.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.ElementCountBuffer">
            <summary>
            Represents an operator that projects each element of the sequence into a
            buffered array based on element count information.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ElementCountBuffer.Count">
            <summary>
            Gets or sets the number of elements in each buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ElementCountBuffer.Skip">
            <summary>
            Gets or sets the optional number of elements to skip between the creation of each buffer.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ElementCountBuffer.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Projects each element of the sequence into a buffered array based on
            element count information.
            </summary>
            <param name="source">
            A sequence of multi-channel matrices to buffer.
            </param>
            <returns>
            The sequence of arrays containing buffers of samples of the
            multi-channel matrix sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Exp">
            <summary>
            Represents an operator that calculates the exponent of every element in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Exp.Process(System.IObservable{System.Double})">
            <summary>
            Calculates the exponent of each 64-bit floating-point number in the sequence.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 64-bit floating-point numbers, where each value
            represents <c>e</c> raised to the corresponding power. See <see cref="M:System.Math.Exp(System.Double)"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Exp.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the exponent of individual elements for all arrays in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each element of the array
            represents <c>e</c> raised to the corresponding power.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Extrema">
            <summary>
            Represents an operator that finds the global minimum and maximum of each
            array in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Extrema.Process``1(System.IObservable{``0})">
            <summary>
            Finds the global minimum and maximum of each array in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dsp.ArrayExtrema"/> values, representing the minimum and
            maximum of the 2D array, and their corresponding locations.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Extrema.Process``2(System.IObservable{System.Tuple{``0,``1}})">
            <summary>
            Finds the global minimum and maximum of each array in an observable sequence,
            where each array is paired with a mask where non-zero values indicate which
            elements in the array should be considered when computing the extrema.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects over which to find the extrema.
            </typeparam>
            <typeparam name="TMask">
            The type of the array-like objects used as an operation mask.
            </typeparam>
            <param name="source">
            A sequence of array pairs, where the first array contains the elements over
            which to find the global minimum and maximum, and the second array contains
            the operation mask, where non-zero values indicate which elements in the
            first array should be considered, and which should be ignored, in the computation.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dsp.ArrayExtrema"/> values, representing the minimum and
            maximum of the 2D array, and their corresponding locations.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.FilterType">
            <summary>
            Specifies the type of digital pass filter to apply on a signal.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FilterType.LowPass">
            <summary>
            A low-pass filter rejects frequencies above the cutoff frequency.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FilterType.HighPass">
            <summary>
            A high-pass filter rejects frequencies below the cutoff frequency.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FilterType.BandPass">
            <summary>
            A band-pass filter rejects frequencies outside the specified frequency
            range, i.e. frequencies below the first cutoff frequency and above the
            second cutoff frequency are rejected.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FilterType.BandStop">
            <summary>
            A band-stop filter rejects frequencies within the specified frequency
            range, i.e. frequencies between the first cutoff frequency and the
            second cutoff frequency are rejected.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.FirFilter">
            <summary>
            Represents an operator that convolves the input signal with a finite-impulse
            response filter kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FirFilter.Anchor">
            <summary>
            Gets or sets the anchor of the kernel that indicates the relative position
            of a filtered point within the kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FirFilter.Kernel">
            <summary>
            Gets or sets the convolution kernel for the FIR filter.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FirFilter.KernelXml">
            <summary>
            Gets or sets an XML representation of the kernel value for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.FirFilter.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Convolves the input signal with a finite-impulse response filter kernel.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.FirFilter.Process(System.IObservable{System.Double})">
            <summary>
            Convolves the input signal with a finite-impulse response filter kernel.
            </summary>
            <param name="source">
            A sequence of floating-point numbers representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of floating-point numbers representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.FirFilter.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Convolves the input position signal with a finite-impulse response filter kernel.
            </summary>
            <param name="source">
            A sequence of 2D points representing the position signal to filter.
            </param>
            <returns>
            A sequence of 2D points representing the filtered position signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.FrequencyFilter">
            <summary>
            Represents an operator that filters frequencies in the input signal using a linear phase
            filter with the specified design parameters.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.SampleRate">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.SamplingFrequency">
            <summary>
            Gets or sets the sample rate of the input signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.SamplingFrequencySpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.FrequencyFilter.SamplingFrequency"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.Cutoff1">
            <summary>
            Gets or sets the first cutoff frequency, in Hz, applied to the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.Cutoff2">
            <summary>
            Gets or sets the second cutoff frequency, in Hz, applied to the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.KernelLength">
            <summary>
            Gets or sets the size of the finite-impulse response kernel used to
            design the linear filter.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FrequencyFilter.FilterType">
            <summary>
            Gets or sets a value specifying the type of filter to apply on the signal.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.FrequencyFilter.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Filters frequencies in the input signal using a linear phase
            filter with the specified design parameters.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.FrequencyFilter.Process(System.IObservable{System.Double})">
            <summary>
            Filters frequencies in the input signal using a linear phase
            filter with the specified design parameters.
            </summary>
            <param name="source">
            A sequence of floating-point numbers representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of floating-point numbers representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.FunctionGenerator">
            <summary>
            Represents an operator that generates signal waveforms following any of a
            set of common periodic functions.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.BufferLength">
            <summary>
            Gets or sets the number of samples in each output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Frequency">
            <summary>
            Gets or sets the frequency of the signal waveform, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Waveform">
            <summary>
            Gets or sets a value specifying the periodic waveform used to sample the signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.SampleRate">
            <summary>
            Gets or sets the sampling rate of the generated signal waveform, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.PlaybackRate">
            <summary>
            Gets or sets the sampling rate of the generated signal waveform, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.PlaybackRateSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.FunctionGenerator.PlaybackRate"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Depth">
            <summary>
            Gets or sets the bit depth of each element in an output buffer.
            </summary>
            <remarks>
            If this property is not specified, the bit depth of output buffers
            will be <see cref="F:OpenCV.Net.Depth.F64"/>.
            </remarks>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.DepthSpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.FunctionGenerator.Depth"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Amplitude">
            <summary>
            Gets or sets the amplitude of the signal waveform.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Offset">
            <summary>
            Gets or sets the optional DC-offset of the signal waveform.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.FunctionGenerator.Phase">
            <summary>
            Gets or sets the optional phase offset, in radians, of the signal waveform.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.FunctionGenerator.Generate">
            <summary>
            Generates an observable sequence of buffers sampled from a signal waveform
            following the specified periodic function.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing signal sampling
            buffers of a fixed length. See <see cref="P:Bonsai.Dsp.FunctionGenerator.BufferLength"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.FunctionGenerator.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of buffers sampled from a signal waveform
            following the specified periodic function, and where each new buffer is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting signal buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing signal sampling
            buffers of a fixed length. See <see cref="P:Bonsai.Dsp.FunctionGenerator.BufferLength"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.FunctionWaveform">
            <summary>
            Specifies the periodic function used to generate a signal waveform.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FunctionWaveform.Sine">
            <summary>
            A sine wave describing a smooth periodic oscillation.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FunctionWaveform.Square">
            <summary>
            A periodic waveform in which the amplitude alternates between
            fixed minimum and maximum values.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FunctionWaveform.Triangular">
            <summary>
            A periodic, piecewise linear waveform in which the amplitude
            moves between fixed minimum and maximum values following a
            triangular shape.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.FunctionWaveform.Sawtooth">
            <summary>
            A periodic, non-symmetric and piecewise linear waveform in which
            the amplitude moves linearly between the fixed minimum and maximum
            values, and then drops sharply from the maximum back to the minimum
            value.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.Histogram1D">
            <summary>
            Represents an operator that computes a sequence of one-dimensional histograms
            from each element in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram1D.Min">
            <summary>
            Gets or sets the lower range of the histogram bins.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram1D.Max">
            <summary>
            Gets or sets the upper range of the histogram bins.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram1D.Bins">
            <summary>
            Gets or sets the number of bins in the histogram.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram1D.Normalize">
            <summary>
            Gets or sets a value specifying whether the histogram should be normalized
            such that the sum of bins adds up to one.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram1D.Accumulate">
            <summary>
            Gets or sets a value specifying whether the histogram should be continuously updated.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Histogram1D.Process(System.IObservable{System.Single})">
            <summary>
            Computes an observable sequence of one-dimensional histograms from each
            element in the source sequence.
            </summary>
            <param name="source">
            A sequence of 32-bit floating-point numbers used to calculate the
            one-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the one-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram1D.Process``1(System.IObservable{``0})">
            <summary>
            Computes an observable sequence of one-dimensional histograms from each
            element in the source sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of array values used to calculate the one-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the one-dimensional
            histogram calculated from the array values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Histogram2D">
            <summary>
            Represents an operator that computes a sequence of two-dimensional histograms
            from each element in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.MinX">
            <summary>
            Gets or sets the lower range of the histogram bins in the horizontal dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.MaxX">
            <summary>
            Gets or sets the upper range of the histogram bins in the horizontal dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.MinY">
            <summary>
            Gets or sets the lower range of the histogram bins in the vertical dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.MaxY">
            <summary>
            Gets or sets the upper range of the histogram bins in the vertical dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.BinsX">
            <summary>
            Gets or sets the number of bins in the horizontal dimension of the histogram.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.BinsY">
            <summary>
            Gets or sets the number of bins in the vertical dimension of the histogram.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.Normalize">
            <summary>
            Gets or sets a value specifying whether the histogram should be normalized
            such that the sum of bins adds up to one.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Histogram2D.Accumulate">
            <summary>
            Gets or sets a value specifying whether the histogram should be continuously updated.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process(System.IObservable{System.Tuple{System.Int32,System.Int32}})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of pairs of integer coordinates.
            </summary>
            <param name="source">
            A sequence of pairs of integer coordinates used to calculate the two-dimensional
            histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of pairs of single-precision floating-point coordinates.
            </summary>
            <param name="source">
            A sequence of pairs of single-precision floating-point coordinates used
            to calculate the two-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process(System.IObservable{OpenCV.Net.Point})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of 2D points with integer coordinates.
            </summary>
            <param name="source">
            A sequence of 2D points with integer coordinates used to calculate the
            two-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of 2D points with single-precision floating-point coordinates.
            </summary>
            <param name="source">
            A sequence of 2D points with single-precision floating-point coordinates used
            to calculate the two-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of pairs of one-dimensional arrays of coordinates.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of one-dimensional arrays, where each array represents
            respectively the horizontal and vertical dimensions used to calculate the
            two-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Histogram2D.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Computes a sequence of two-dimensional histograms from an observable sequence
            of multi-channel arrays of point coordinates.
            </summary>
            <param name="source">
            A sequence of two-channel arrays, or single-channel arrays with two rows, where
            the different elements in an array represent the horizontal and vertical dimensions
            used to calculate the two-dimensional histogram.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the two-dimensional
            histogram calculated from the values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.IirFilter">
            <summary>
            Represents an operator that filters the input signal using an infinite-impulse response.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.IirFilter.FeedforwardCoefficients">
            <summary>
            Gets or sets the feedforward filter coefficients for the infinite-impulse response.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.IirFilter.FeedbackCoefficients">
            <summary>
            Gets or sets the feedback filter coefficients for the infinite-impulse response.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.IirFilter.FeedforwardCoefficientsXml">
            <summary>
            Gets or sets an XML representation of the feedforward coefficients for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.IirFilter.FeedbackCoefficientsXml">
            <summary>
            Gets or sets an XML representation of the feedback coefficients for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.IirFilter.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Filters the input signal using the specified infinite-impulse response.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.IirFilter.Process(System.IObservable{System.Double})">
            <summary>
            Filters the input signal using the specified infinite-impulse response.
            </summary>
            <param name="source">
            A sequence of floating-point numbers representing the waveform of the
            signal to filter.
            </param>
            <returns>
            A sequence of floating-point numbers representing the waveform of the
            filtered signal.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.IirFilter.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Filters the input position signal using the specified infinite-impulse response.
            </summary>
            <param name="source">
            A sequence of 2D points representing the position signal to filter.
            </param>
            <returns>
            A sequence of 2D points representing the filtered position signal.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.IncrementalMean">
            <summary>
            Represents an operator that incrementally computes the mean of the arrays in the sequence
            and returns each intermediate result.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.IncrementalMean.Process``1(System.IObservable{``0})">
            <summary>
            Incrementally computes the mean of the arrays in an observable sequence
            and returns each intermediate result.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each array stores the
            incremental mean of all previous array values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Log">
            <summary>
            Represents an operator that calculates the natural logarithm of the absolute
            value of every element in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Log.Process(System.IObservable{System.Double})">
            <summary>
            Calculates the natural logarithm of each 64-bit floating-point number in the sequence.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 64-bit floating-point numbers, where each value represents the
            natural logarithm of the corresponding number in the <paramref name="source"/>
            sequence. See <see cref="M:System.Math.Log(System.Double)"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Log.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the natural logarithm of the absolute value of every element for
            each array in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each element of the array
            represents the natural logarithm of the corresponding element in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Magnitude">
            <summary>
            Represents an operator that calculates the magnitude of 2D vector elements in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Magnitude.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Calculates the magnitude of pairs of one-dimensional arrays in an observable sequence,
            where each pair represents a 2D vector element.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            A sequence of pairs of one-dimensional arrays, where each array represents
            respectively the X and Y coordinates of a 2D vector.
            <returns>
            A sequence of single-channel arrays where each element represents the magnitude
            of the corresponding 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Magnitude.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the magnitude of 2D vector elements in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of two-channel arrays where each element represents a 2D vector.
            </param>
            <returns>
            A sequence of single-channel arrays where each element represents the magnitude
            of the corresponding 2D vector.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.MatchTemplate">
            <summary>
            Represents an operator that compares a template against overlapping regions of each array in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatchTemplate.MatchingMethod">
            <summary>
            Gets or sets a value specifying the method used to compare the template
            with overlapping array regions.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.MatchTemplate.Process``2(System.IObservable{System.Tuple{``0,``1}})">
            <summary>
            Compares a template against overlapping regions of each array in
            an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects to compare with the template.
            </typeparam>
            <typeparam name="TTemplate">
            The type of the array-like objects representing the template to compare
            against arrays in the sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of multi-channel arrays representing respectively the
            values and the template used to compute the map of comparison results.
            </param>
            <returns>
            A single-channel array of 32-bit floating-point values representing a map of
            the comparison results for each overlapping region.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.MatConverter">
            <summary>
            Provides a type converter to convert two-dimensional <see cref="T:OpenCV.Net.Mat"/> objects
            to and from various other representations.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.MatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.MatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:Bonsai.Dsp.MatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If <see langword="null"/> is passed, the current culture
            is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:Bonsai.Dsp.MatrixLayout">
            <summary>
            Specifies how to store the elements of a multi-channel array or matrix
            in sequential memory.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.MatrixLayout.RowMajor">
            <summary>
            The elements in each row of the matrix will be contiguous in memory.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.MatrixLayout.ColumnMajor">
            <summary>
            The elements in each column of the matrix will be contiguous in memory.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.MatrixReader">
            <summary>
            Represents an operator that generates a sequence of signal sample buffers from
            the specified raw binary input stream.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.Path">
            <summary>
            Gets or sets the identifier of the named stream from which to read the samples.
            </summary>
            <remarks>
            If the identifier uses the named pipe prefix <c>\\.\pipe\</c>, a corresponding
            <see cref="T:System.IO.Pipes.NamedPipeClientStream"/> object is created; otherwise a regular
            <see cref="T:System.IO.FileStream"/> is used.
            </remarks>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.FileName">
            <summary>
            Gets or sets the name of the file from which to read the samples.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.Offset">
            <summary>
            Gets or sets the byte offset at which to start reading the raw binary file.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.SampleRate">
            <summary>
            Gets or sets the sample rate of the stored signal, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.Frequency">
            <summary>
            Gets or sets the sampling rate of the generated signal waveform, in Hz.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.FrequencySpecified">
            <summary>
            Gets a value indicating whether the <see cref="P:Bonsai.Dsp.MatrixReader.Frequency"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.ChannelCount">
            <summary>
            Gets or sets the number of channels in the stored signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.BufferLength">
            <summary>
            Gets or sets the number of samples in each output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.Depth">
            <summary>
            Gets or sets the bit depth of each element in an output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixReader.Layout">
            <summary>
            Gets or sets a value specifying the sequential memory layout used to
            store the sample buffers.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.MatrixReader.Generate">
            <summary>
            Generates an observable sequence of signal sample buffers from
            the specified raw binary input stream.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing fixed-size buffers
            of samples from the signal stored in the specified file.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.MatrixReader.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of signal sample buffers from
            the specified raw binary input stream, where each new buffer is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing fixed-size buffers
            of samples from the signal stored in the specified file.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.MatrixWriter">
            <summary>
            Represents an operator that writes each array-like object in the sequence
            to a raw binary output stream.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.MatrixWriter.Layout">
            <summary>
            Gets or sets a value specifying the sequential memory layout used to
            store the sample buffers.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.MatrixWriter.CreateWriter(System.IO.Stream)">
            <summary>
            Creates a binary writer over the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream on which the elements should be written.</param>
            <returns>
            A <see cref="T:System.IO.BinaryWriter"/> object used to write binary array data
            into the stream.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.MatrixWriter.Write(System.IO.BinaryWriter,System.ArraySegment{System.Byte})">
            <summary>
            Writes a new array to the raw binary output stream.
            </summary>
            <param name="writer">
            A <see cref="T:System.IO.BinaryWriter"/> object used to write binary array data to
            the output stream.
            </param>
            <param name="input">
            The array segment containing the binary data to write into the output
            stream.
            </param>
        </member>
        <member name="M:Bonsai.Dsp.MatrixWriter.Process``1(System.IObservable{``0[]})">
            <summary>
            Writes all of the arrays in an observable sequence to the specified raw binary output stream.
            </summary>
            <param name="source">
            The sequence of arrays to write. The elements stored in each array must
            be of an unmanaged type.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of writing the arrays to a stream.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.MatrixWriter.Process(System.IObservable{System.Byte[]})">
            <summary>
            Writes all of the <see cref="T:System.Byte"/> arrays in an observable sequence to the
            specified raw binary output stream.
            </summary>
            <param name="source">
            The sequence of <see cref="T:System.Byte"/> arrays to write.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of writing the arrays to a stream.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.MatrixWriter.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Writes all multi-channel matrices in an observable sequence to the
            specified raw binary output stream.
            </summary>
            <param name="source">
            The sequence of multi-channel matrices to write.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of writing the matrices to a stream.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Merge">
            <summary>
            Represents an operator that merges each set of arrays in the sequence into
            a single multi-channel array.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Merge.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Merges each pair of arrays in the sequence into a single multi-channel array.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of arrays to merge into a single multi-channel array.
            </param>
            <returns>
            The sequence of merged multi-channel arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Merge.Process``1(System.IObservable{System.Tuple{``0,``0,``0}})">
            <summary>
            Merges each triple of arrays in the sequence into a single multi-channel array.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of triples of arrays to merge into a single multi-channel array.
            </param>
            <returns>
            The sequence of merged multi-channel arrays.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Merge.Process``1(System.IObservable{System.Tuple{``0,``0,``0,``0}})">
            <summary>
            Merges each tuple of arrays in the sequence into a single multi-channel array.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of tuples of arrays to merge into a single multi-channel array.
            </param>
            <returns>
            The sequence of merged multi-channel arrays.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Norm">
            <summary>
            Represents an operator that calculates the absolute array norm, absolute difference norm,
            or relative difference norm for each array in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Norm.NormType">
            <summary>
            Gets or sets the type of array norm to calculate.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process(System.IObservable{OpenCV.Net.Point})">
            <summary>
            Calculates the absolute norm for each 2D point in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with integer coordinates for which to calculate
            the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each point in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Calculates the absolute norm for each 2D point in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with single-precision floating-point coordinates
            for which to calculate the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each point in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process(System.IObservable{OpenCV.Net.Point2d})">
            <summary>
            Calculates the absolute norm for each 2D point in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D points with double-precision floating-point coordinates
            for which to calculate the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each point in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process(System.IObservable{OpenCV.Net.Point3f})">
            <summary>
            Calculates the absolute norm for each 3D point in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 3D points with single-precision floating-point coordinates
            for which to calculate the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each point in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process(System.IObservable{OpenCV.Net.Point3d})">
            <summary>
            Calculates the absolute norm for each 3D point in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 3D points with double-precision floating-point coordinates
            for which to calculate the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each point in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the absolute array norm for each array in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-dimensional arrays for which to calculate the norm.
            </param>
            <returns>
            A sequence containing the absolute norm for each array in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process``2(System.IObservable{System.Tuple{``0,``1}})">
            <summary>
            Calculates the absolute difference norm, or relative difference norm, between each
            pair of arrays in an observable sequence.
            </summary>
            <typeparam name="TArray1">
            The type of the first array-like object.
            </typeparam>
            <typeparam name="TArray2">
            The type of the second array-like object.
            </typeparam>
            <param name="source">
            A sequence of pairs of multi-dimensional arrays for which to calculate the
            absolute difference norm or relative difference norm.
            </param>
            <returns>
            A sequence containing the absolute difference norm, or relative difference norm,
            between each pair of arrays in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Norm.Process``3(System.IObservable{System.Tuple{``0,``1,``2}})">
            <summary>
            Calculates the absolute difference norm, or relative difference norm, between each
            pair of arrays in an observable sequence with an additional operation mask.
            </summary>
            <typeparam name="TArray1">
            The type of the first array-like object.
            </typeparam>
            <typeparam name="TArray2">
            The type of the second array-like object.
            </typeparam>
            <typeparam name="TMask">
            The type of the array-like objects used in the operation mask.
            </typeparam>
            <param name="source">
            A sequence of pairs of multi-dimensional arrays for which to calculate the
            absolute difference norm or relative difference norm, for elements in
            which the operation mask is non-zero.
            </param>
            <returns>
            A sequence containing the absolute difference norm, or relative difference norm,
            between each pair of arrays in the <paramref name="source"/> sequence, for
            elements in which the operation mask is non-zero.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Phase">
            <summary>
            Represents an operator that calculates the phase of 2D vector elements in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Phase.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Calculates the phase of pairs of one-dimensional arrays in an observable sequence,
            where each pair represents a 2D vector element.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            A sequence of pairs of one-dimensional arrays, where each array represents
            respectively the X and Y coordinates of a 2D vector.
            <returns>
            A sequence of single-channel arrays where each element represents the phase
            of the corresponding 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Phase.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the phase of 2D vector elements in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of two-channel arrays where each element represents a 2D vector.
            </param>
            <returns>
            A sequence of single-channel arrays where each element represents the phase
            of the corresponding 2D vector.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.PolarToCart">
            <summary>
            Represents an operator that computes the cartesian coordinates of 2D vectors
            represented in polar form.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.PolarToCart.AngleInDegrees">
            <summary>
            Gets or sets a value specifying whether vector angle values are measured in degrees.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process``1(System.IObservable{``0})">
            <summary>
            Computes the cartesian coordinates for each array of vectors in polar form
            in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of 2D vector fields represented by a 2-channel array or image,
            for which to compute the cartesian coordinates.
            </param>
            <returns>
            A sequence of 2-channel arrays or images, where the first channel of each
            element stores the x-coordinates and the second channel the y-coordinates of
            a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process``1(System.IObservable{System.Tuple{``0,``0}})">
            <summary>
            Computes the cartesian coordinates for each pair of polar coordinates in the sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of pairs of arrays, where the first array stores the magnitude, and the
            second array the angle of a 2D vector field for which to compute the cartesian
            coordinates.
            </param>
            <returns>
            A sequence of pairs of arrays, where the first array stores the x-coordinates, and the
            second array the y-coordinates of a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process(System.IObservable{OpenCV.Net.Point2d})">
            <summary>
            Computes the cartesian coordinates for each pair of polar coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of points in double-precision polar coordinates, where the first
            coordinate stores the magnitude, and the second coordinate the angle of a
            vector for which to compute the cartesian coordinates.
            </param>
            <returns>
            A sequence of 2D points with double-precision cartesian coordinates.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Computes the cartesian coordinates for each pair of polar coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of points in single-precision polar coordinates, where the first
            coordinate stores the magnitude, and the second coordinate the angle of a
            vector for which to compute the cartesian coordinates.
            </param>
            <returns>
            A sequence of 2D points with single-precision cartesian coordinates.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process(System.IObservable{System.Tuple{System.Double,System.Double}})">
            <summary>
            Computes the cartesian coordinates for each pair of polar coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of pairs specifying double-precision polar coordinates, where the
            first coordinate stores the magnitude, and the second coordinate the angle
            of a vector for which to compute the cartesian coordinates.
            </param>
            <returns>
            A sequence of pairs specifying double-precision cartesian coordinates, where
            the first item stores the x-coordinate, and the second item the y-coordinate
            of a 2D vector.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.PolarToCart.Process(System.IObservable{System.Tuple{System.Single,System.Single}})">
            <summary>
            Computes the cartesian coordinates for each pair of polar coordinates in the sequence.
            </summary>
            <param name="source">
            A sequence of pairs specifying single-precision polar coordinates, where the
            first coordinate stores the magnitude, and the second coordinate the angle
            of a vector for which to compute the cartesian coordinates.
            </param>
            <returns>
            A sequence of pairs specifying single-precision cartesian coordinates, where
            the first item stores the x-coordinate, and the second item the y-coordinate
            of a 2D vector.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Pow">
            <summary>
            Represents an operator that raises every element in the sequence to the specified power.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Pow.Power">
            <summary>
            Gets or sets the specified power.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Pow.Process(System.IObservable{System.Double})">
            <summary>
            Raises every 64-bit floating-point number in an observable sequence
            to the specified power.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 64-bit floating-point numbers, where each value
            represents a number raised to the specified power. See
            <see cref="M:System.Math.Pow(System.Double,System.Double)"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Pow.Process``1(System.IObservable{``0})">
            <summary>
            Raises every individual element for all arrays in an observable sequence
            to the specified power.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each element of the array
            represents a value raised to the specified power.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Range">
            <summary>
            Represents an operator that generates a sequence of buffers filled with a
            specified range of numbers.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Range.BufferLength">
            <summary>
            Gets or sets the number of samples in each output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Range.Depth">
            <summary>
            Gets or sets the bit depth of each element in the output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Range.Start">
            <summary>
            Gets or sets the inclusive lower bound of the range.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Range.End">
            <summary>
            Gets or sets the exclusive upper bound of the range.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Range.Generate">
            <summary>
            Generates an observable sequence of buffers filled with a
            specified range of numbers.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing fixed-size buffers
            linearly filled with values between the inclusive lower bound and
            exclusive upper bound.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Range.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of buffers filled with a specified
            range of numbers, and where each new buffer is emitted only when an
            observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting sample buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing fixed-size buffers
            linearly filled with values between the inclusive lower bound and
            exclusive upper bound.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.RasterSpikes">
            <summary>
            Represents an operator that rasterizes a sequence of spike waveforms into
            sample buffers where spike timepoints are the only non-zero values.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.RasterSpikes.Process(System.IObservable{Bonsai.Dsp.SpikeWaveformCollection})">
            <summary>
            Rasterizes an observable sequence of spike waveforms into sample buffers
            where spike timepoints are the only non-zero values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Dsp.SpikeWaveformCollection"/> objects representing
            all detected spike events in each continuous signal buffer.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing continuous sample
            buffers in which only indices where spikes were detected will have
            non-zero values.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Reduce">
            <summary>
            Represents an operator that reduces every array in the sequence to a 1D vector using the specified operation.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Reduce.Axis">
            <summary>
            Gets or sets the dimension along which to reduce the array.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Reduce.Operation">
            <summary>
            Gets or sets a value specifying the reduction operation to be applied.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Reduce.Process``1(System.IObservable{``0})">
            <summary>
            Reduces every array in an observable sequence to a 1D vector using
            the specified operation.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of 1D vector arrays storing the results of the reduction operation.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ReferenceChannels">
            <summary>
            Represents an operator that subtracts a reference channel from all the
            individual rows in a 2D array sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ReferenceChannels.Channels">
            <summary>
            Gets or sets the indices of the channels to use as reference. If not specified,
            the average of all the array channels is used.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ReferenceChannels.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Subtracts a reference channel from all the individual rows in an observable sequence
            of 2D array values.
            </summary>
            <param name="source">
            A sequence of 2D array values.
            </param>
            <returns>
            A sequence of 2D array values, where the reference channel for each array
            has been subtracted from every row.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Rescale">
            <summary>
            Represents an operator that rescales each element in the sequence to a new range
            following the specified linear relationship.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Rescale.Min">
            <summary>
            Gets or sets the lower bound of the range of values in the input sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Rescale.Max">
            <summary>
            Gets or sets the upper bound of the range of values in the input sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Rescale.RangeMin">
            <summary>
            Gets or sets the lower bound of the range of values after the rescale operation.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Rescale.RangeMax">
            <summary>
            Gets or sets the upper bound of the range of values after the rescale operation.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Rescale.RescaleType">
            <summary>
            Gets or sets a value specifying the method used to rescale the values in the
            input sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Rescale.Process(System.IObservable{System.Double})">
            <summary>
            Rescales every 64-bit floating-point number in an observable sequence to
            a new range following the specified linear relationship.
            </summary>
            <param name="source">
            A sequence of 64-bit floating-point numbers.
            </param>
            <returns>
            A sequence of 64-bit floating-point numbers, where each value
            has been rescaled following the specified linear relationship.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Rescale.Process``1(System.IObservable{``0})">
            <summary>
            Rescales every individual element for all arrays in an observable sequence to
            a new range following the specified linear relationship.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each element of the array
            has been rescaled following the specified linear relationship.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.RescaleMethod">
            <summary>
            Specifies the method used to rescale values in the <see cref="T:Bonsai.Dsp.Rescale"/> operator.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.RescaleMethod.Linear">
            <summary>
            Values outside the specified range are extrapolated linearly.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.RescaleMethod.Clamp">
            <summary>
            Values outside the specified range are clamped to the lower or upper
            bounds of the output range.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.Reshape">
            <summary>
            Represents an operator that changes the shape of each array in the sequence
            without copying data.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Reshape.Channels">
            <summary>
            Gets or sets the new number of channels. Zero means the number of channels will not change.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Reshape.Rows">
            <summary>
            Gets or sets the new number of rows. Zero means the number of rows will not change.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Reshape.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Changes the shape of each matrix in an observable sequence without copying data.
            </summary>
            <param name="source">
            The sequence of multi-channel matrices to be reshaped.
            </param>
            <returns>
            The sequence of reshaped multi-channel matrices.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Reshape.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Changes the shape of each image in an observable sequence without copying data.
            </summary>
            <param name="source">
            The sequence of images to be reshaped.
            </param>
            <returns>
            The sequence of reshaped images.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.RunningAverage">
            <summary>
            Represents an operator that computes the running average of all the arrays in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.RunningAverage.Alpha">
            <summary>
            Gets or sets the weight to assign to each new array in the sequence.
            This parameter determines how fast the average forgets previous values.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.RunningAverage.Process``1(System.IObservable{``0})">
            <summary>
            Computes the running average of all the arrays in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel arrays, where each element represents the weighted
            sum of the corresponding input value and the accumulated average.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.ScalarBuffer">
            <summary>
            Represents an operator that generates a sequence with a single buffer
            where all elements are set to the same scalar value.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ScalarBuffer.Size">
            <summary>
            Gets or sets the size of the output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ScalarBuffer.Depth">
            <summary>
            Gets or sets the bit depth of each element in the output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ScalarBuffer.Channels">
            <summary>
            Gets or sets the number of channels in the output buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.ScalarBuffer.Value">
            <summary>
            Gets or sets the scalar value to which all elements in the output buffer
            will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.ScalarBuffer.Generate">
            <summary>
            Generates an observable sequence with a single buffer where all elements
            are set to the same scalar value.
            </summary>
            <returns>
            A sequence with a single <see cref="T:OpenCV.Net.Mat"/> object with the specified
            element type and where all the elements are set to the same scalar value.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.ScalarBuffer.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of buffers where all elements
            are set to the same scalar value, and where each new buffer is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new buffers.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects with the specified element type
            and where all the elements are set to the same scalar value.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.SelectChannels">
            <summary>
            Represents an operator that selects a subset of the input channels or reorganizes
            channel layout for each array in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.SelectChannels.Channels">
            <summary>
            Gets or sets the indices of the channels to include in the output buffer.
            Reordering and duplicating channels is allowed.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.SelectChannels.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Selects a subset of the input channels or reorganizes channel layout
            for each array in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D array values.
            </param>
            <returns>
            A sequence of 2D array values, where the data for each row is selected
            from the specified channels of the original multi-dimensional data.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Shift">
            <summary>
            Represents an operator that shifts the elements of each array in the sequence
            by a specified offset.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Shift.Offset">
            <summary>
            Gets or sets the offset by which to shift the input buffer in the
            horizontal and vertical direction.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Shift.BorderType">
            <summary>
            Gets or sets a value specifying the method used to generate values on the
            border of the shift.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Shift.FillValue">
            <summary>
            Gets or sets the value to which constant border pixels will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Shift.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Shifts the elements of each matrix in an observable sequence by a specified
            offset.
            </summary>
            <param name="source">
            A sequence of 2D matrix values.
            </param>
            <returns>
            A sequence of 2D matrix values, where the elements in each matrix are
            shifted by the specified offset in the horizontal and vertical direction.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Shift.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Shifts the elements of each image in an observable sequence by a specified
            offset.
            </summary>
            <param name="source">
            A sequence of image values.
            </param>
            <returns>
            A sequence of image values, where the elements in each image are
            shifted by the specified offset in the horizontal and vertical direction.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Skip">
            <summary>
            Represents an operator that skips a specified number of samples in the input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Skip.Count">
            <summary>
            Gets or sets the number of samples to skip.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Skip.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Skips a specified number of samples in the input signal.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing buffers of samples
            from the source signal.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects representing buffers of samples
            from the source signal, but where a specified number of samples has been
            removed from the start of the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Slice">
            <summary>
            Represents an operator that splits each array in the sequence into multiple
            sub-arrays along the specified dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Slice.Axis">
            <summary>
            Gets or sets the dimension along which to slice the array.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Slice.Count">
            <summary>
            Gets or sets the number of elements in each slice.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Slice.Skip">
            <summary>
            Gets or sets the number of elements to skip between the creation of each slice.
            If it is not specified, it will be set to the number of elements in each slice.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Slice.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Splits each image in an observable sequence into multiple
            sub-images along the specified dimension.
            </summary>
            <param name="source">
            A sequence of image values.
            </param>
            <returns>
            A sequence of image values, where each image represents a slice of
            the original image, along the specified direction, with the specified
            number of elements.
            </returns>
            <remarks>
            If <see cref="P:Bonsai.Dsp.Slice.Count"/> is smaller than the size of the images, this
            operator will return multiple sub-images for each image in the
            <paramref name="source"/> sequence.
            </remarks>
        </member>
        <member name="M:Bonsai.Dsp.Slice.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Splits each matrix in an observable sequence into multiple
            sub-matrices along the specified dimension.
            </summary>
            <param name="source">
            A sequence of 2D matrix values.
            </param>
            <returns>
            A sequence of 2D matrix values, where each matrix represents a slice of
            the original matrix, along the specified direction, with the specified
            number of elements.
            </returns>
            <remarks>
            If <see cref="P:Bonsai.Dsp.Slice.Count"/> is smaller than the size of the matrices, this
            operator will return multiple sub-matrices for each matrix in the
            <paramref name="source"/> sequence.
            </remarks>
        </member>
        <member name="T:Bonsai.Dsp.SpikeWaveform">
            <summary>
            Represents a single spike event extracted from an input signal.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.SpikeWaveform.ChannelIndex">
            <summary>
            Gets or sets a value indicating in which channel the spike event
            was detected.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.SpikeWaveform.SampleIndex">
            <summary>
            Gets or sets a value indicating in which sample the spike event
            was detected.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.SpikeWaveform.Waveform">
            <summary>
            Gets or sets the optional waveform of the spike event.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.SpikeWaveformCollection">
            <summary>
            Represents a collection of spike waveforms detected by the
            <see cref="T:Bonsai.Dsp.DetectSpikes"/> operator.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.SpikeWaveformCollection.#ctor(OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dsp.SpikeWaveformCollection"/> class
            with the specified buffer size.
            </summary>
            <param name="bufferSize">
            The size of the original buffer in which the spikes in this collection
            were detected.
            </param>
        </member>
        <member name="M:Bonsai.Dsp.SpikeWaveformCollection.#ctor(System.Collections.Generic.IList{Bonsai.Dsp.SpikeWaveform},OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dsp.SpikeWaveformCollection"/> class
            as a wrapper to the specified list of spikes and buffer size.
            </summary>
            <param name="spikes">
            The list of spikes that is wrapped by the new collection.
            </param>
            <param name="bufferSize">
            The size of the original buffer in which the spikes in the list
            were detected.
            </param>
        </member>
        <member name="P:Bonsai.Dsp.SpikeWaveformCollection.BufferSize">
            <summary>
            Gets the size of the original buffer in which the spikes in this
            collection were detected.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.SpikeWaveformRefinement">
            <summary>
            Specifies the spike waveform refinement method used in the
            <see cref="T:Bonsai.Dsp.DetectSpikes"/> operator.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.SpikeWaveformRefinement.None">
            <summary>
            The waveform is aligned to the first sample crossing the threshold.
            </summary>
        </member>
        <member name="F:Bonsai.Dsp.SpikeWaveformRefinement.AlignPeaks">
            <summary>
            The waveform is aligned to either the positive or negative peak
            of the spike.
            </summary>
        </member>
        <member name="T:Bonsai.Dsp.Split">
            <summary>
            Represents an operator that splits the channels of each array in the sequence into separate arrays.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Split.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Splits the channels of each matrix in an observable sequence into
            separate matrices.
            </summary>
            <param name="source">
            A sequence of 2D matrix values.
            </param>
            <returns>
            A sequence of tuples of 2D matrix values, where each matrix represents
            a different channel from the original matrix. If the matrix has less than
            four channels, the remaining elements in the tuple after the last channel
            will be set to <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dsp.Split.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Splits the channels of each image in an observable sequence into
            separate images.
            </summary>
            <param name="source">
            A sequence of image values.
            </param>
            <returns>
            A sequence of tuples of image values, where each image represents
            a different channel from the original matrix. If the image has less than
            four channels, the remaining elements in the tuple after the last channel
            will be set to <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Submatrix">
            <summary>
            Represents an operator that extracts a submatrix from each array in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Submatrix.StartRow">
            <summary>
            Gets or sets the first row of the submatrix.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Submatrix.EndRow">
            <summary>
            Gets or sets the last row of the submatrix. If it is not specified, the
            submatrix will end at the last row of the array.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Submatrix.StartCol">
            <summary>
            Gets or sets the first column of the submatrix.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Submatrix.EndCol">
            <summary>
            Gets or sets the last column of the submatrix. If it is not specified, the
            submatrix will end at the last column of the array.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Submatrix.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Extracts a submatrix from each array in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D matrix values.
            </param>
            <returns>
            A sequence of 2D matrix values, where each matrix stores the range
            of rows and columns specified by the submatrix.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Sum">
            <summary>
            Represents an operator that calculates the sum of each channel for all the
            arrays in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Sum.Process``1(System.IObservable{``0})">
            <summary>
            Calculates the sum of each channel for all the arrays in an observable
            sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of array values for which to calculate the per-channel sum.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Scalar"/> tuple containing the sum of each channel for all
            the arrays in the <paramref name="source"/> sequence.
            </returns>
            <remarks>
            For multi-channel images using BGR, RGB, or other color formats, the order of
            values in the <see cref="T:OpenCV.Net.Scalar"/> tuple follows the order of channels in the
            color format, e.g. for a BGR image, the sum for the blue-channel will be
            stored in <see cref="F:OpenCV.Net.Scalar.Val0"/>, the sum for the green-channel in
            <see cref="F:OpenCV.Net.Scalar.Val1"/>, etc.
            
            For single-channel arrays such as a grayscale image or a 2D floating point
            array with signal processing data, the sum will be stored in the first
            value of the tuple, <see cref="F:OpenCV.Net.Scalar.Val0"/>.
            </remarks>
        </member>
        <member name="T:Bonsai.Dsp.Threshold">
            <summary>
            Represents an operator that applies a fixed threshold to each element in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Threshold.ThresholdValue">
            <summary>
            Gets or sets the threshold value used to test individual samples.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Threshold.MaxValue">
            <summary>
            Gets or sets the value assigned to samples determined to be above the threshold.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Threshold.ThresholdType">
            <summary>
            Gets or sets a value specifying the type of threshold to apply to
            individual samples.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Threshold.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Applies a fixed threshold to each element in an observable sequence.
            </summary>
            <param name="source">
            A sequence of 2D matrix values.
            </param>
            <returns>
            A sequence of 2D matrix values, where the values in each matrix are
            set by applying the threshold operation specified in <see cref="P:Bonsai.Dsp.Threshold.ThresholdType"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Tile">
            <summary>
            Represents an operator that replicates each array in the sequence along the
            horizontal or vertical dimensions.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Tile.RowTiles">
            <summary>
            Gets or sets the number of times to repeat each array in the vertical dimension.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.Tile.ColumnTiles">
            <summary>
            Gets or sets the number of times to repeat each array in the horizontal dimension.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Tile.Process``1(System.IObservable{``0})">
            <summary>
            Replicates each array in an observable sequence along the horizontal or
            vertical dimensions.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each array is created by
            replicating the original array along the horizontal or vertical dimension.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.Transpose">
            <summary>
            Represents an operator that transposes every array in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.Transpose.Process``1(System.IObservable{``0})">
            <summary>
            Transposes every array in an observable sequence.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            A sequence of multi-channel array values.
            </param>
            <returns>
            A sequence of multi-channel array values, where each new array is the
            transpose of the original array.
            </returns>
        </member>
        <member name="T:Bonsai.Dsp.TriggeredBuffer">
            <summary>
            Represents an operator that extracts a number of samples from the input signal
            whenever a trigger rises.
            </summary>
        </member>
        <member name="P:Bonsai.Dsp.TriggeredBuffer.Count">
            <summary>
            Gets or sets the number of samples in each triggered buffer.
            </summary>
        </member>
        <member name="M:Bonsai.Dsp.TriggeredBuffer.Process(System.IObservable{System.Tuple{OpenCV.Net.Mat,OpenCV.Net.Mat}})">
            <summary>
            Extracts a number of samples from the input signal whenever a trigger rises.
            </summary>
            <param name="source">
            A sequence of pairs of 2D matrices, where the first matrix contains the
            signal to extract samples from, and the second matrix contains the
            binary trigger signal, where zero values represent the trigger is in a
            LOW state, and positive values represent the trigger is in a HIGH state.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects storing the extracted samples
            whenever the trigger line changes from LOW to HIGH.
            </returns>
        </member>
    </members>
</doc>
